# Crichton, Admirable Source Configuration Management
# Copyright 2012 British Broadcasting Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
from random import randint
from crichtonweb.core.tests import crichtonTestCase
from crichtonweb.system.models import *
from crichtonweb.prodmgmt.tests import create_tst_application

def create_tst_environment():
    x = randint(0, 1000)
    me = Environment(name="My Environment %s" % x)
    me.save()
    return me

def create_tst_internetaddress():
    x = randint(0, 100)
    me = InternetAddress(address="test internet address %s" % x)
    me.save()
    return me

def create_tst_node():
    x = randint(0,100)
    env = create_tst_environment()
    me = Node(name="node %s" % x, environment=env)
    me.save()
    return me

def create_tst_nodeaddress():
    x = randint(0,100)
    node = create_tst_node()
    address = create_tst_internetaddress()
    me = NodeAddress(node=node, address=address)
    me.save()
    return me

def create_tst_pool():
    x = randint(0,100)
    env = create_tst_environment()
    role = create_tst_role()
    me = Pool(name="Pool %s" % x, environment=env, role=role)
    me.save()
    return me

def create_tst_role():
    x = randint(0,100)
    me = Role(name="Role %s" % x)
    me.save()
    return me

def create_tst_rolemembership():
    role = create_tst_role()
    application = create_tst_application()
    me = RoleMembership(role=role, application=application)
    me.save()
    return me

def create_tst_poolmembership():
    node = create_tst_node()
    pool = create_tst_pool()
    me = PoolMembership(node=node, pool=pool)
    me.save()
    return me

def create_tst_crichtonstatus():
    me = crichtonCronJobStatus( date=datetime.datetime.now(), name="unit-test", status="Successful", comment="This is cron job generated by the crichtons' unit test, so it does not represent any existing cron job")
    me.save()
    return me

class SystemTestCase(crichtonTestCase):

    def test_create_environment(self):
        me = create_tst_environment()
        self.run_std_tsts(me)
        me.delete()
        
    def test_create_internetaddress(self):
        me = create_tst_internetaddress()
        self.run_std_tsts(me)
        self.assertRaises(Exception, me.delete)

    def test_create_node(self):
        me = create_tst_node()
        self.run_std_tsts(me)
        me.delete()
    
    def test_create_nodeaddress(self):
        me = create_tst_nodeaddress()
        self.run_std_tsts(me)
        me.delete()
        
    def test_create_pool(self):
        me = create_tst_pool()
        self.run_std_tsts(me)
        me.delete()
        
    def test_create_role(self):
        me = create_tst_role()
        self.run_std_tsts(me)
        me.delete()
        
    def test_create_rolemembership(self):
        me = create_tst_rolemembership()
        self.run_std_tsts(me)
        me.delete()
        
    def test_create_poolmembership(self):
        me = create_tst_poolmembership()
        self.run_std_tsts(me)
        self.assertEqual(me.deleted, False)
        me.delete()
        self.assertEqual(me.deleted, True)
        
    def test_create_crichtonstatus(self):
        me = create_tst_crichtonstatus()
        self.run_std_tsts(me, test_admin=False)
        self.assertEqual(me.deleted, False)
        me.delete()
        self.assertEqual(me.deleted, True)
# eof
